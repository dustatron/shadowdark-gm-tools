/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestShadcnRouteImport } from './routes/test-shadcn'
import { Route as AnotherPageRouteImport } from './routes/anotherPage'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SpellsIndexRouteImport } from './routes/spells/index'
import { Route as ProfileIndexRouteImport } from './routes/profile/index'
import { Route as MonstersIndexRouteImport } from './routes/monsters/index'
import { Route as FavoritesIndexRouteImport } from './routes/favorites/index'
import { Route as AboutIndexRouteImport } from './routes/about/index'
import { Route as SpellsSlugRouteImport } from './routes/spells/$slug'
import { Route as MonstersSlugRouteImport } from './routes/monsters/$slug'

const TestShadcnRoute = TestShadcnRouteImport.update({
  id: '/test-shadcn',
  path: '/test-shadcn',
  getParentRoute: () => rootRouteImport,
} as any)
const AnotherPageRoute = AnotherPageRouteImport.update({
  id: '/anotherPage',
  path: '/anotherPage',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SpellsIndexRoute = SpellsIndexRouteImport.update({
  id: '/spells/',
  path: '/spells/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const MonstersIndexRoute = MonstersIndexRouteImport.update({
  id: '/monsters/',
  path: '/monsters/',
  getParentRoute: () => rootRouteImport,
} as any)
const FavoritesIndexRoute = FavoritesIndexRouteImport.update({
  id: '/favorites/',
  path: '/favorites/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutIndexRoute = AboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any)
const SpellsSlugRoute = SpellsSlugRouteImport.update({
  id: '/spells/$slug',
  path: '/spells/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const MonstersSlugRoute = MonstersSlugRouteImport.update({
  id: '/monsters/$slug',
  path: '/monsters/$slug',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/anotherPage': typeof AnotherPageRoute
  '/test-shadcn': typeof TestShadcnRoute
  '/monsters/$slug': typeof MonstersSlugRoute
  '/spells/$slug': typeof SpellsSlugRoute
  '/about': typeof AboutIndexRoute
  '/favorites': typeof FavoritesIndexRoute
  '/monsters': typeof MonstersIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/spells': typeof SpellsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/anotherPage': typeof AnotherPageRoute
  '/test-shadcn': typeof TestShadcnRoute
  '/monsters/$slug': typeof MonstersSlugRoute
  '/spells/$slug': typeof SpellsSlugRoute
  '/about': typeof AboutIndexRoute
  '/favorites': typeof FavoritesIndexRoute
  '/monsters': typeof MonstersIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/spells': typeof SpellsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/anotherPage': typeof AnotherPageRoute
  '/test-shadcn': typeof TestShadcnRoute
  '/monsters/$slug': typeof MonstersSlugRoute
  '/spells/$slug': typeof SpellsSlugRoute
  '/about/': typeof AboutIndexRoute
  '/favorites/': typeof FavoritesIndexRoute
  '/monsters/': typeof MonstersIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/spells/': typeof SpellsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/anotherPage'
    | '/test-shadcn'
    | '/monsters/$slug'
    | '/spells/$slug'
    | '/about'
    | '/favorites'
    | '/monsters'
    | '/profile'
    | '/spells'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/anotherPage'
    | '/test-shadcn'
    | '/monsters/$slug'
    | '/spells/$slug'
    | '/about'
    | '/favorites'
    | '/monsters'
    | '/profile'
    | '/spells'
  id:
    | '__root__'
    | '/'
    | '/anotherPage'
    | '/test-shadcn'
    | '/monsters/$slug'
    | '/spells/$slug'
    | '/about/'
    | '/favorites/'
    | '/monsters/'
    | '/profile/'
    | '/spells/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AnotherPageRoute: typeof AnotherPageRoute
  TestShadcnRoute: typeof TestShadcnRoute
  MonstersSlugRoute: typeof MonstersSlugRoute
  SpellsSlugRoute: typeof SpellsSlugRoute
  AboutIndexRoute: typeof AboutIndexRoute
  FavoritesIndexRoute: typeof FavoritesIndexRoute
  MonstersIndexRoute: typeof MonstersIndexRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
  SpellsIndexRoute: typeof SpellsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test-shadcn': {
      id: '/test-shadcn'
      path: '/test-shadcn'
      fullPath: '/test-shadcn'
      preLoaderRoute: typeof TestShadcnRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/anotherPage': {
      id: '/anotherPage'
      path: '/anotherPage'
      fullPath: '/anotherPage'
      preLoaderRoute: typeof AnotherPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/spells/': {
      id: '/spells/'
      path: '/spells'
      fullPath: '/spells'
      preLoaderRoute: typeof SpellsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/monsters/': {
      id: '/monsters/'
      path: '/monsters'
      fullPath: '/monsters'
      preLoaderRoute: typeof MonstersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favorites/': {
      id: '/favorites/'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof FavoritesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/spells/$slug': {
      id: '/spells/$slug'
      path: '/spells/$slug'
      fullPath: '/spells/$slug'
      preLoaderRoute: typeof SpellsSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/monsters/$slug': {
      id: '/monsters/$slug'
      path: '/monsters/$slug'
      fullPath: '/monsters/$slug'
      preLoaderRoute: typeof MonstersSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AnotherPageRoute: AnotherPageRoute,
  TestShadcnRoute: TestShadcnRoute,
  MonstersSlugRoute: MonstersSlugRoute,
  SpellsSlugRoute: SpellsSlugRoute,
  AboutIndexRoute: AboutIndexRoute,
  FavoritesIndexRoute: FavoritesIndexRoute,
  MonstersIndexRoute: MonstersIndexRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  SpellsIndexRoute: SpellsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
